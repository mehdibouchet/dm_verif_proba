Dans ce rapport, nous détaillerons le choix d'implémentation de notre 


Les propriétés atomatiques

wait : Wait est un bool. Elle permet de définir si l'utilisateur est autorisé a agir. Si la variable est a true, l'automate est dans l'attente d'une action utilisateur. Elle nous est utile afin de simplifier les transitions du modèle et l'expression de nos propriétés. En effet, en poussant le sujet un peu plus en profondeur, si l'on souhaite implémenter la notion d'erreur utilisateur dans les propriétés du modèle en vérifiant s'il est autorisé ou non à appuyer sur un bouton, il nous suffira de vérifier la valeur de la variable wait.
    Wait est initialisé a true

Les boutons
    Il est défini 4 propriétés atomatiques permettant de désigner les boutons de la machine.
    
    B_caf : B_caf est un bool. Elle permet de définir si l'utilisateur vient d'appuyer sur le bouton café. Le bouton est initialisé à false.
    B_the : B_the est un bool. Elle permet de définir si l'utilisateur vient d'appuyer sur le bouton thé. Le bouton est initialisé à false.
    B_ann : B_ann est un bool. Elle permet de définir si l'utilisateur vient d'appuyer sur le bouton annulé. Le bouton est initialisé à false.
    B_suc : B_suc est un bool. Elle permet de définir si l'utilisateur vient d'appuyer sur le bouton sucre. Le bouton est initialisé à false.

Les voyants
    Voy: Il est défini un propriété atomatique pouvant prendre 3 valeurs permettant de définir le voyant allumé. (Voy = 0) si le voyant prêt est allumé, (Voy = 1) si le voyant "preparation" est allumé et (Voy = 2) si le voyant "fin" est allum". Par défaut initialisé à 0.

    Nous avons fait le choix de définir une propriété atomique numérique afin de simplifier l'écriture de notre modele. Il est a noté qu'il n'est pas possible dans notre conception d'allumer deux voyants à la fois auquel cas j'aurais défini trois PA booléenne bien distinctes ou aggrandi le domaine des valeurs de Voy et défini (Voy = 3) comme le voyant "prêt" et "prep" allumé et ainsi de suite... De plus, on peut définir (Voy = 3) "tous les voyants s'allument" afin de définir aisaiment le changement d'état des voyants lors d'une erreur machine.

La pièce
    P_50: P_50 est un bool. Elle permet de définir si la pièce vient d'être insérée par l'utilisateur. Elle est initialisé à false.
    R_50: R_50 est un bool. Elle permet de définir si la pièce vient d'être rendue par l'utilisateur. Elle est initialisé à false.

L'utilisateur
    G_out : G_out est un bool. Elle permet de définir si l'utilisateur vient de prendre son Gobelet. Elle est initialisé à false.

Le sucre
    P_suc: Il est défini un propriété atomatique pouvant prendre 3 valeurs permettant de définir la quantité de sucre demandé par l'utilisateur. (P_suc = 0) si l'utilisateur n'a pas demandé de sucre. (P_suc = 1) si l'utilisateur a demandé une quantité de sucre. (P_suc = 2) si l'utilisateur a demandé deux quantité de sucre. Par défaut initialisé à 0.

    Nous avons fait le choix de définir une propriété atomique numérique afin de simplifier l'écriture de notre modele. Il est a noté qu'il n'est pas possible dans notre conception d'allumer deux voyants à la fois auquel cas j'aurais défini trois PA booléenne bien distinctes ou aggrandi le domaine des valeurs de Voy et défini (Voy = 3) comme le voyant "prêt" et "prep" allumé et ainsi de suite... De plus, on peut définir (Voy = 3) "tous les voyants s'allument" afin de définir aisaiment le changement d'état des voyants lors d'une erreur machine.
// PA Sucre
// P_suc = 0 : il n'y a pas de sucre
// P_suc = 1 : il y a du sucre en quantité moyenne
// P_suc = 2 : il y a beaucoup de sucre
P_suc : [0..2] init 0;

// PA Mode
// Mode = 0 : Le distributeur est en mode "dispo" - label "M_dispo"
// Mode = 1 : Le distributeur est en mode "choix" - label "M_choix"
// Mode = 2 : Le distributeur est en mode "prepa" - label "M_prepa"
// Mode = 3 : Le distributeur est en mode "fin"   - label "M_fin"
Mode : [0..3] init 0;

// PA Type
// Type = 0 : L'utilisateur n'a rien selectionné
// Type = 1 : L'utilisateur a selectionné du café
// Type = 2 : L'utilisateur a selectionné du thé
Type : [0..2] init 0;

// PA Preparation
// Prepa = 0 : La distributeur n'a rien préparé
// Prepa = 1 : La distributeur a préparé du café
// Prepa = 2 : La distributeur a préparé du the
Prepa : [0..2] init 0;